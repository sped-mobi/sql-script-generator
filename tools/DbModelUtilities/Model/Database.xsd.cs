//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool named XsdGen.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.IO;
using System.Xml;
using System.Text;
using System.Collections;
using System.Xml.Serialization;
using System.Collections.Generic;

namespace DatabaseUtilities.Model
{

    [XmlRoot]
    public partial class Schemas
    {

        public Schemas()
        {
            Schema = new List<Schema>();
        }

        [XmlElement("Schema", Type = typeof(Schema))]
        public List<Schema> Schema { get; set; }


        [XmlIgnore]
        public Database Parent { get; private set; }

        public void Initialize(Database parent)
        {
            Parent = parent;
            foreach (var schema in Schema)
            {
                schema.Initialize(this);
            }
        }

        public static Schemas DeserializeFromFile(string filePath)
        {
            XmlReader reader = XmlReader.Create(filePath);
            XmlSerializer serializer = new XmlSerializer(typeof(Schemas));
            return (Schemas)serializer.Deserialize(reader);
        }

        public static string SerializeObject(Schemas o)
        {
            MemoryStream stream = new MemoryStream();
            XmlWriter writer = XmlWriter.Create(stream);
            XmlSerializer serializer = new XmlSerializer(typeof(Schemas));
            serializer.Serialize(writer, o);
            return System.Text.Encoding.GetEncoding("utf-16").GetString(stream.ToArray());
        }

    }

    [XmlRoot]
    public partial class Schema
    {

        [XmlAttribute]
        public string Name { get; set; }

        [XmlAttribute]
        public bool DbDefault { get; set; }


        public static Schema DeserializeFromFile(string filePath)
        {
            XmlReader reader = XmlReader.Create(filePath);
            XmlSerializer serializer = new XmlSerializer(typeof(Schema));
            return (Schema)serializer.Deserialize(reader);
        }

        public static string SerializeObject(Schema o)
        {
            MemoryStream stream = new MemoryStream();
            XmlWriter writer = XmlWriter.Create(stream);
            XmlSerializer serializer = new XmlSerializer(typeof(Schema));
            serializer.Serialize(writer, o);
            return System.Text.Encoding.GetEncoding("utf-16").GetString(stream.ToArray());
        }

        public void Initialize(Schemas parent)
        {
            Parent = parent;
        }

        [XmlIgnore]
        public Schemas Parent { get; private set; }
    }

    [XmlRoot]
    public partial class Tables
    {

        public Tables()
        {
            Table = new List<Table>();
        }

        [XmlElement("Table", Type = typeof(Table))]
        public List<Table> Table { get; set; }

        [XmlIgnore]
        public Database Parent { get; private set; }

        public void Initialize(Database parent)
        {
            Parent = parent;

            foreach (var table in Table)
            {
                table.Initialize(this);
            }
        }

        public static Tables DeserializeFromFile(string filePath)
        {
            XmlReader reader = XmlReader.Create(filePath);
            XmlSerializer serializer = new XmlSerializer(typeof(Tables));
            return (Tables)serializer.Deserialize(reader);
        }

        public static string SerializeObject(Tables o)
        {
            MemoryStream stream = new MemoryStream();
            XmlWriter writer = XmlWriter.Create(stream);
            XmlSerializer serializer = new XmlSerializer(typeof(Tables));
            serializer.Serialize(writer, o);
            return System.Text.Encoding.GetEncoding("utf-16").GetString(stream.ToArray());
        }

    }

    [XmlRoot]
    public partial class Table
    {

        public Table()
        {
            Columns = new Columns();
            Indexes = new Indexes();
            ForeignKeys = new ForeignKeys();
        }

        [XmlElement]
        public Columns Columns { get; set; }

        [XmlElement]
        public Indexes Indexes { get; set; }

        [XmlElement]
        public ForeignKeys ForeignKeys { get; set; }

        [XmlAttribute]
        public string Schema { get; set; }

        [XmlAttribute]
        public string Name { get; set; }

        [XmlIgnore]
        public Tables Parent { get; private set; }

        public static Table DeserializeFromFile(string filePath)
        {
            XmlReader reader = XmlReader.Create(filePath);
            XmlSerializer serializer = new XmlSerializer(typeof(Table));
            return (Table)serializer.Deserialize(reader);
        }

        public static string SerializeObject(Table o)
        {
            MemoryStream stream = new MemoryStream();
            XmlWriter writer = XmlWriter.Create(stream);
            XmlSerializer serializer = new XmlSerializer(typeof(Table));
            serializer.Serialize(writer, o);
            return System.Text.Encoding.GetEncoding("utf-16").GetString(stream.ToArray());
        }

        public void Initialize(Tables parent)
        {
            Parent = parent;
            Columns.Initialize(this);
            Indexes.Initialize(this);
            ForeignKeys.Initialize(this);
        }
    }

    [XmlRoot]
    public partial class Indexes
    {

        public Indexes()
        {
            Index = new List<Index>();
        }

        [XmlElement("Index", Type = typeof(Index))]
        public List<Index> Index { get; set; }

        [XmlIgnore]
        public Table Parent { get; private set; }

        public void Initialize(Table parent)
        {
            Parent = parent;

            foreach (var index in Index)
            {
                index.Initialize(this);
            }
        }

        public static Indexes DeserializeFromFile(string filePath)
        {
            XmlReader reader = XmlReader.Create(filePath);
            XmlSerializer serializer = new XmlSerializer(typeof(Indexes));
            return (Indexes)serializer.Deserialize(reader);
        }

        public static string SerializeObject(Indexes o)
        {
            MemoryStream stream = new MemoryStream();
            XmlWriter writer = XmlWriter.Create(stream);
            XmlSerializer serializer = new XmlSerializer(typeof(Indexes));
            serializer.Serialize(writer, o);
            return System.Text.Encoding.GetEncoding("utf-16").GetString(stream.ToArray());
        }

    }

    [XmlRoot]
    public partial class Index
    {

        public Index()
        {
            Members = new Members();
        }

        [XmlElement]
        public Members Members { get; set; }

        [XmlAttribute]
        public string Name { get; set; }

        [XmlAttribute]
        public bool IsClustered { get; set; }

        [XmlAttribute]
        public bool IsUnique { get; set; }

        [XmlAttribute]
        public bool IsPrimary { get; set; }


        public static Index DeserializeFromFile(string filePath)
        {
            XmlReader reader = XmlReader.Create(filePath);
            XmlSerializer serializer = new XmlSerializer(typeof(Index));
            return (Index)serializer.Deserialize(reader);
        }

        public static string SerializeObject(Index o)
        {
            MemoryStream stream = new MemoryStream();
            XmlWriter writer = XmlWriter.Create(stream);
            XmlSerializer serializer = new XmlSerializer(typeof(Index));
            serializer.Serialize(writer, o);
            return System.Text.Encoding.GetEncoding("utf-16").GetString(stream.ToArray());
        }

        public void Initialize(Indexes parent)
        {
            Parent = parent;
            Members.Initialize(this);
        }

        [XmlIgnore]
        public Indexes Parent { get; set; }
    }

    [XmlRoot]
    public partial class Members
    {

        public Members()
        {
            Member = new List<Member>();
        }

        [XmlElement("Member", Type = typeof(Member))]
        public List<Member> Member { get; set; }

        public static Members DeserializeFromFile(string filePath)
        {
            XmlReader reader = XmlReader.Create(filePath);
            XmlSerializer serializer = new XmlSerializer(typeof(Members));
            return (Members)serializer.Deserialize(reader);
        }

        public static string SerializeObject(Members o)
        {
            MemoryStream stream = new MemoryStream();
            XmlWriter writer = XmlWriter.Create(stream);
            XmlSerializer serializer = new XmlSerializer(typeof(Members));
            serializer.Serialize(writer, o);
            return System.Text.Encoding.GetEncoding("utf-16").GetString(stream.ToArray());
        }

        public void Initialize(Index parent)
        {
            Parent = parent;
        }

        [XmlIgnore]
        public Index Parent { get; set; }
    }

    [XmlRoot]
    public partial class Member
    {

        [XmlAttribute]
        public string Column { get; set; }

        [XmlAttribute]
        public int Position { get; set; }

        [XmlAttribute]
        public bool IsIncluded { get; set; }

        public static Member DeserializeFromFile(string filePath)
        {
            XmlReader reader = XmlReader.Create(filePath);
            XmlSerializer serializer = new XmlSerializer(typeof(Member));
            return (Member)serializer.Deserialize(reader);
        }

        public static string SerializeObject(Member o)
        {
            MemoryStream stream = new MemoryStream();
            XmlWriter writer = XmlWriter.Create(stream);
            XmlSerializer serializer = new XmlSerializer(typeof(Member));
            serializer.Serialize(writer, o);
            return System.Text.Encoding.GetEncoding("utf-16").GetString(stream.ToArray());
        }

    }

    [XmlRoot]
    public partial class Columns
    {

        public Columns()
        {
            Column = new List<Column>();
        }

        [XmlElement("Column", Type = typeof(Column))]
        public List<Column> Column { get; set; }

        [XmlIgnore]
        public Table Parent { get; private set; }

        public static Columns DeserializeFromFile(string filePath)
        {
            XmlReader reader = XmlReader.Create(filePath);
            XmlSerializer serializer = new XmlSerializer(typeof(Columns));
            return (Columns)serializer.Deserialize(reader);
        }

        public static string SerializeObject(Columns o)
        {
            MemoryStream stream = new MemoryStream();
            XmlWriter writer = XmlWriter.Create(stream);
            XmlSerializer serializer = new XmlSerializer(typeof(Columns));
            serializer.Serialize(writer, o);
            return System.Text.Encoding.GetEncoding("utf-16").GetString(stream.ToArray());
        }

        public void Initialize(Table parent)
        {
            Parent = parent;
            foreach (var column in Column)
            {
                column.Initialize(this);
            }
        }
    }

    [XmlRoot]
    public partial class Column
    {

        [XmlAttribute]
        public string Name { get; set; }

        [XmlAttribute]
        public bool IsIdentity { get; set; }

        [XmlAttribute]
        public int IdentitySeed { get; set; }

        [XmlAttribute]
        public int IdentityIncrement { get; set; }

        [XmlAttribute]
        public int Position { get; set; }

        [XmlAttribute]
        public string DataType { get; set; }

        [XmlAttribute]
        public bool AllowNulls { get; set; }



        public static Column DeserializeFromFile(string filePath)
        {
            XmlReader reader = XmlReader.Create(filePath);
            XmlSerializer serializer = new XmlSerializer(typeof(Column));
            return (Column)serializer.Deserialize(reader);
        }

        public static string SerializeObject(Column o)
        {
            MemoryStream stream = new MemoryStream();
            XmlWriter writer = XmlWriter.Create(stream);
            XmlSerializer serializer = new XmlSerializer(typeof(Column));
            serializer.Serialize(writer, o);
            return System.Text.Encoding.GetEncoding("utf-16").GetString(stream.ToArray());
        }

        public void Initialize(Columns columns)
        {
            Parent = columns;
        }

        [XmlIgnore]
        public Columns Parent { get; private set; }
    }

    [XmlRoot]
    public partial class ForeignKeys
    {

        public ForeignKeys()
        {
            ForeignKey = new List<ForeignKey>();
        }

        [XmlElement("ForeignKey", Type = typeof(ForeignKey))]
        public List<ForeignKey> ForeignKey { get; set; }

        public static ForeignKeys DeserializeFromFile(string filePath)
        {
            XmlReader reader = XmlReader.Create(filePath);
            XmlSerializer serializer = new XmlSerializer(typeof(ForeignKeys));
            return (ForeignKeys)serializer.Deserialize(reader);
        }

        public static string SerializeObject(ForeignKeys o)
        {
            MemoryStream stream = new MemoryStream();
            XmlWriter writer = XmlWriter.Create(stream);
            XmlSerializer serializer = new XmlSerializer(typeof(ForeignKeys));
            serializer.Serialize(writer, o);
            return System.Text.Encoding.GetEncoding("utf-16").GetString(stream.ToArray());
        }

        public void Initialize(Table parent)
        {
            Parent = parent;
            foreach (ForeignKey key in ForeignKey)
            {
                key.Initialize(this);
            }
        }

        [XmlIgnore]
        public Table Parent { get; set; }
    }

    [XmlRoot]
    public partial class ForeignKey
    {

        public ForeignKey()
        {
            ForeignKeyColumns = new ForeignKeyColumns();
        }

        [XmlElement]
        public ForeignKeyColumns ForeignKeyColumns { get; set; }

        [XmlAttribute]
        public string Name { get; set; }

        [XmlAttribute]
        public string PkTableSchema { get; set; }

        [XmlAttribute]
        public string PkTable { get; set; }





        public static ForeignKey DeserializeFromFile(string filePath)
        {
            XmlReader reader = XmlReader.Create(filePath);
            XmlSerializer serializer = new XmlSerializer(typeof(ForeignKey));
            return (ForeignKey)serializer.Deserialize(reader);
        }

        public static string SerializeObject(ForeignKey o)
        {
            MemoryStream stream = new MemoryStream();
            XmlWriter writer = XmlWriter.Create(stream);
            XmlSerializer serializer = new XmlSerializer(typeof(ForeignKey));
            serializer.Serialize(writer, o);
            return System.Text.Encoding.GetEncoding("utf-16").GetString(stream.ToArray());
        }

        public void Initialize(ForeignKeys parent)
        {
            Parent = parent;
            ForeignKeyColumns.Initialize(this);
        }

        [XmlIgnore]
        public ForeignKeys Parent { get; private set; }
    }

    [XmlRoot]
    public partial class ForeignKeyColumns
    {

        public ForeignKeyColumns()
        {
            ForeignKeyColumn = new List<ForeignKeyColumn>();
        }

        [XmlElement("ForeignKeyColumn", Type = typeof(ForeignKeyColumn))]
        public List<ForeignKeyColumn> ForeignKeyColumn { get; set; }



        public static ForeignKeyColumns DeserializeFromFile(string filePath)
        {
            XmlReader reader = XmlReader.Create(filePath);
            XmlSerializer serializer = new XmlSerializer(typeof(ForeignKeyColumns));
            return (ForeignKeyColumns)serializer.Deserialize(reader);
        }

        public static string SerializeObject(ForeignKeyColumns o)
        {
            MemoryStream stream = new MemoryStream();
            XmlWriter writer = XmlWriter.Create(stream);
            XmlSerializer serializer = new XmlSerializer(typeof(ForeignKeyColumns));
            serializer.Serialize(writer, o);
            return System.Text.Encoding.GetEncoding("utf-16").GetString(stream.ToArray());
        }

        public void Initialize(ForeignKey parent)
        {
            Parent = parent;
            foreach (ForeignKeyColumn column in ForeignKeyColumn)
            {
                column.Initialize(this);
            }
        }

        [XmlIgnore]
        public ForeignKey Parent { get; private set; }
    }

    [XmlRoot]
    public partial class ForeignKeyColumn
    {

        [XmlAttribute]
        public string FkColumn { get; set; }

        [XmlAttribute]
        public int Position { get; set; }

        [XmlAttribute]
        public string PkColumn { get; set; }

        public static ForeignKeyColumn DeserializeFromFile(string filePath)
        {
            XmlReader reader = XmlReader.Create(filePath);
            XmlSerializer serializer = new XmlSerializer(typeof(ForeignKeyColumn));
            return (ForeignKeyColumn)serializer.Deserialize(reader);
        }

        public static string SerializeObject(ForeignKeyColumn o)
        {
            MemoryStream stream = new MemoryStream();
            XmlWriter writer = XmlWriter.Create(stream);
            XmlSerializer serializer = new XmlSerializer(typeof(ForeignKeyColumn));
            serializer.Serialize(writer, o);
            return System.Text.Encoding.GetEncoding("utf-16").GetString(stream.ToArray());
        }

        public void Initialize(ForeignKeyColumns parent)
        {
            Parent = parent;
        }

        [XmlIgnore]
        public ForeignKeyColumns Parent { get; set; }
    }

    [XmlRoot]
    public partial class Database
    {

        public Database()
        {
            Schemas = new Schemas();
            Tables = new Tables();
        }

        [XmlElement]
        public Schemas Schemas { get; set; }

        [XmlElement]
        public Tables Tables { get; set; }

        [XmlAttribute]
        public string Version { get; set; }

        [XmlAttribute]
        public string DatabaseName { get; set; }



        public void Initialize()
        {
            Schemas.Initialize(this);
            Tables.Initialize(this);
        }

        public static Database DeserializeFromFile(string filePath)
        {
            XmlReader reader = XmlReader.Create(filePath);
            XmlSerializer serializer = new XmlSerializer(typeof(Database));
            return (Database)serializer.Deserialize(reader);
        }

        public static string SerializeObject(Database o)
        {
            MemoryStream stream = new MemoryStream();
            XmlWriter writer = XmlWriter.Create(stream);
            XmlSerializer serializer = new XmlSerializer(typeof(Database));
            serializer.Serialize(writer, o);
            return System.Text.Encoding.ASCII.GetString(stream.ToArray());
        }

    }

    public enum SqlType
    {

        [XmlEnum("tinyint")]
        Tinyint,

        [XmlEnum("smallint")]
        Smallint,

        [XmlEnum("bigint")]
        Bigint,

        [XmlEnum("int")]
        Int,

        [XmlEnum("smallmoney")]
        Smallmoney,

        [XmlEnum("money")]
        Money,

        [XmlEnum("float")]
        Float,

        [XmlEnum("real")]
        Real,

        [XmlEnum("numeric")]
        Numeric,

        [XmlEnum("bit")]
        Bit,

        [XmlEnum("decimal")]
        Decimal,

        [XmlEnum("date")]
        Date,

        [XmlEnum("datetimeoffset")]
        Datetimeoffset,

        [XmlEnum("datetime2")]
        Datetime2,

        [XmlEnum("smalldatetime")]
        Smalldatetime,

        [XmlEnum("datetime")]
        Datetime,

        [XmlEnum("time")]
        Time,

        [XmlEnum("char")]
        Char,

        [XmlEnum("varchar")]
        Varchar,

        [XmlEnum("text")]
        Text,

        [XmlEnum("nchar")]
        Nchar,

        [XmlEnum("nvarchar")]
        Nvarchar,

        [XmlEnum("ntext")]
        Ntext,

        [XmlEnum("binary")]
        Binary,

        [XmlEnum("varbinary")]
        Varbinary,

        [XmlEnum("image")]
        Image,

        [XmlEnum("cursor")]
        Cursor,

        [XmlEnum("rowversion")]
        Rowversion,

        [XmlEnum("hierarchyid")]
        Hierarchyid,

        [XmlEnum("uniqueidentifier")]
        Uniqueidentifier,

        [XmlEnum("sql_variant")]
        Sql_variant,

        [XmlEnum("xml")]
        Xml,

        [XmlEnum("table")]
        Table,

        [XmlEnum("geography")]
        Geography,

        [XmlEnum("geometry")]
        Geometry,
    }
}
