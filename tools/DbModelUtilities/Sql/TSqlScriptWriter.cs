// -----------------------------------------------------------------------
// <copyright file="TSqlScriptWriter.cs" company="sped.mobi">
//  Copyright � 2018 <Unknown>. All rights reserved.
// </copyright>
// -----------------------------------------------------------------------
using System;
using System.CodeDom.Compiler;
using System.IO;
using Microsoft.SqlServer.TransactSql.ScriptDom;

namespace DatabaseUtilities.Sql
{
    public class TSqlScriptWriter : IDisposable
    {
        private readonly IndentedTextWriter _writer;

        private readonly Sql150ScriptGenerator _generator;

        public TSqlScriptWriter(TextWriter writer, Sql150ScriptGenerator generator)
        {
            _writer = new IndentedTextWriter(writer);
            _generator = generator;
        }

        public TSqlScriptWriter(TextWriter writer)
        {
            _writer = new IndentedTextWriter(writer);
            _generator = new Sql150ScriptGenerator();
            _generator.Options.AlignClauseBodies = true;
            _generator.Options.AsKeywordOnOwnLine = true;
            _generator.Options.KeywordCasing = KeywordCasing.Lowercase;
            _generator.Options.IncludeSemicolons = true;
            _generator.Options.IndentationSize = 4;
            _generator.Options.SqlVersion = SqlVersion.Sql150;
            _generator.Options.NewLineBeforeOpenParenthesisInMultilineList = true;
        }

        public void WriteScript(TSqlScript script, KeywordCasing casing = KeywordCasing.Lowercase)
        {
            _generator.Options.KeywordCasing = casing;

            

            WriteHeader();

            foreach (var batch in script.Batches)
            {
                WriteBatch(batch);
            }
        }

        public void WriteBatch(TSqlBatch batch)
        {
            _generator.GenerateScript(batch, _writer);
            WriteFragment(GO());
        }

        public void WriteFragment(TSqlFragment fragment)
        {
            foreach (var token in _generator.GenerateTokens(fragment))
            {
                if (token.TokenType != TSqlTokenType.For)
                {
                    WriteToken(token);
                }
                
            }
            
            //_generator.GenerateScript(fragment, _writer);
        }

        public void WriteToken(TSqlParserToken token)
        {
            _writer.Write(token.Text);
        }

        private IdentifierLiteral GO()
        {
            switch (_generator.Options.KeywordCasing)
            {
                case KeywordCasing.Lowercase:
                    return ScriptFactory.IdentifierLiteral("go\r\n");
                case KeywordCasing.Uppercase:
                    return ScriptFactory.IdentifierLiteral("GO\r\n");
                case KeywordCasing.PascalCase:
                    return ScriptFactory.IdentifierLiteral("Go\r\n");
                default:
                    throw new ArgumentOutOfRangeException();
            }
        }


        private void WriteHeader()
        {
            WriteLine("/*******************************************************************************");
            WriteLine("--     This code was generated by a tool.");
            WriteLine("--     Runtime Version:4.0.30319.42000");
            WriteLine("--");
            WriteLine("--     Changes to this file may cause incorrect behavior and will be lost if");
            WriteLine("--     the code is regenerated.");
            WriteLine("*******************************************************************************/");
            WriteLine();
        }

        private void PushIndent()
        {
            _writer.Indent++;
        }

        private void PopIndent()
        {
            _writer.Indent--;
        }

        private void OpenBlock()
        {
            WriteLine("{");
            PushIndent();
        }

        private void CloseBlock()
        {
            PopIndent();
            WriteLine("}");
        }

        private void Write(string value)
        {
            _writer.Write(value);
        }

        private void WriteLine(string value)
        {
            _writer.WriteLine(value);
        }

        private void WriteLine()
        {
            _writer.WriteLine();
        }

        public void Dispose()
        {
            _writer.Dispose();
        }
    }
}
